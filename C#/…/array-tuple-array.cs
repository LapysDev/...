#nullable enable

public class A {
  public int n;
  public override string? ToString() => this.GetType().ToString() + '{' + this.n.ToString() + '}';
  public static implicit operator A(int _) => new() {n = _};
}
public class B : A { public static implicit operator B(int _) => new() {n = _}; }
public class C : B { public static implicit operator C(int _) => new() {n = _}; }
public class D : A { public static implicit operator D(int _) => new() {n = _}; }
public class E : A { public static implicit operator E(int _) => new() {n = _}; }
public class F : E { public static implicit operator F(int _) => new() {n = _}; }
public class G : F { public static implicit operator G(int _) => new() {n = _}; }

public static class Program {
  [System.Flags]
  public enum AsArrayOptions : byte {
    AbstractTypes  = (byte) (0x1u << 0), // --> `(class A:B, class A:C).AsArray() == object[]`
    All            = AsArrayOptions.AbstractTypes | AsArrayOptions.DeriveTypes | AsArrayOptions.PromoteTypes | AsArrayOptions.ReferenceTypes,
    Default        = AsArrayOptions.AbstractTypes | AsArrayOptions.DeriveTypes | AsArrayOptions.PromoteTypes,
    DeriveTypes    = (byte) (0x1u << 1), // --> `(int,       uint)     .AsArray() == System.ValueType[]`
    None           = (byte) (0x0u),      // --> `(int,       uint)     .AsArray() == object          []`
    PromoteTypes   = (byte) (0x1u << 2), // --> `(int,       uint)     .AsArray() == long            []`
    ReferenceTypes = (byte) (0x1u << 3)  // --> `(class A:B, class A:C).AsArray() == abstract class A[]` ->> Ensures covariant cast to `object[]`, despite constraining `object[]` to only `A` elements
  }

  /* ... */
  public static System.Array AsArray(this System.Runtime.CompilerServices.ITuple tuple, AsArrayOptions options = AsArrayOptions.Default) {
    System.Array array  = System.Array.Empty<object>();
    int          length = tuple?.Length ?? 0;

    // ...
    if (0 != length) {
      (bool isBigInteger, bool isComplex, bool isHalf, bool isInt128, bool isNFloat, bool isUInt128, System.Type  type) common          = (default, default, default, default, default, default, typeof(object));
      (bool evaluated,    bool isNullable,                                                           System.Type? type) promoted        = (false, false, null);
      System.Collections.Generic.Stack<System.Type>[]                                                                   typeHierarchies = new System.Collections.Generic.Stack<System.Type>[length];

      /* ... */
      [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
      static object? Convert(object? value, System.Type type) {
        try { return System.Convert.ChangeType(value, type); }
        catch (System.InvalidCastException) {}

        return null;
      }

      // ... --> promoted.type = …; typeHierarchies = …
      for (int index = length; 0 != index--; ) {
        System.Type?                                  type          = tuple![index]?.GetType();
        System.Collections.Generic.Stack<System.Type> typeHierarchy = new(2);

        // ...
        if (AsArrayOptions.None != (options & AsArrayOptions.PromoteTypes) && AsArrayOptions.None == (options & AsArrayOptions.ReferenceTypes)) {
          if      (type          is     null) promoted.isNullable = true;                         // ->> Unfortunately, `System.Nullable<>[]` is not covariant with `object[]`
          else if (promoted.type is not null) promoted.type       = Promote(promoted.type, type); // ->> Promote to non-abstract
          else if (!promoted.evaluated)     { promoted.evaluated  = true; promoted.type = type; }
        }

        // ...
        for (type = AsArrayOptions.None != (options & AsArrayOptions.DeriveTypes) && type is not null ? type : typeof(object); type is not null; type = type.BaseType)
        if (
          (AsArrayOptions.None != (options & AsArrayOptions.AbstractTypes)  || !type.IsAbstract) &&
          (AsArrayOptions.None == (options & AsArrayOptions.ReferenceTypes) || !type.IsValueType)
        ) typeHierarchy.Push(type);

        typeHierarchies[index] = typeHierarchy;
      }

      // ... --> common.type = …;
      if (promoted.type is null) {
        promoted.isNullable = false;

        for (; typeHierarchies[0].TryPop(out System.Type? type); common.type = type)
        for (int index = length; 0 != --index; ) {
          if (typeHierarchies[index].TryPop(out System.Type? subtype) && subtype != type)
          goto instantiate;
        }
      } else common.type = promoted.type;

      // ...
      instantiate:
      array = System.Array.CreateInstance(promoted.isNullable ? typeof(System.Nullable<>).MakeGenericType(common.type) : common.type, length);

      if (common.type != promoted.type) {
        while (0 != length--)
        array.SetValue(tuple![length], length);
      }

      else {
        common.isBigInteger = common.type == typeof(System.Numerics.BigInteger);
        common.isComplex    = common.type == typeof(System.Numerics.Complex);
        common.isHalf       = common.type == typeof(System.Half);
        common.isInt128     = common.type == typeof(System.Int128);
        common.isNFloat     = common.type == typeof(System.Runtime.InteropServices.NFloat);
        common.isUInt128    = common.type == typeof(System.UInt128);

        while (0 != length--)
        array.SetValue(tuple![length] switch {
          byte                                  elementByte       => common.isBigInteger ? (System.Numerics.BigInteger)          elementByte       : common.isComplex ? (System.Numerics.Complex)          elementByte       : common.isHalf ? (System.Half) elementByte         : common.isInt128 ? (System.Int128) elementByte         : common.isNFloat ? (System.Runtime.InteropServices.NFloat)          elementByte         : common.isUInt128 ? (System.UInt128) elementByte         : Convert(elementByte,       common.type),
          char                                  elementChar       => common.isBigInteger ? (System.Numerics.BigInteger)          elementChar       : common.isComplex ? (System.Numerics.Complex)          elementChar       : common.isHalf ? (System.Half) elementChar         : common.isInt128 ? (System.Int128) elementChar         : common.isNFloat ? (System.Runtime.InteropServices.NFloat)          elementChar         : common.isUInt128 ? (System.UInt128) elementChar         : Convert((int) elementChar, common.type),
          decimal                               elementDecimal    => common.isBigInteger ? (System.Numerics.BigInteger)          elementDecimal    : common.isComplex ? (System.Numerics.Complex)          elementDecimal    : common.isHalf ? (System.Half) elementDecimal      : common.isInt128 ? (System.Int128) elementDecimal      : common.isNFloat ? (System.Runtime.InteropServices.NFloat)          elementDecimal      : common.isUInt128 ? (System.UInt128) elementDecimal      : Convert(elementDecimal,    common.type),
          double                                elementDouble     => common.isBigInteger ? (System.Numerics.BigInteger)          elementDouble     : common.isComplex ? (System.Numerics.Complex)          elementDouble     : common.isHalf ? (System.Half) elementDouble       : common.isInt128 ? (System.Int128) elementDouble       : common.isNFloat ? (System.Runtime.InteropServices.NFloat)          elementDouble       : common.isUInt128 ? (System.UInt128) elementDouble       : Convert(elementDouble,     common.type),
          float                                 elementSingle     => common.isBigInteger ? (System.Numerics.BigInteger)          elementSingle     : common.isComplex ? (System.Numerics.Complex)          elementSingle     : common.isHalf ? (System.Half) elementSingle       : common.isInt128 ? (System.Int128) elementSingle       : common.isNFloat ? (System.Runtime.InteropServices.NFloat)          elementSingle       : common.isUInt128 ? (System.UInt128) elementSingle       : Convert(elementSingle,     common.type),
          int                                   elementInt32      => common.isBigInteger ? (System.Numerics.BigInteger)          elementInt32      : common.isComplex ? (System.Numerics.Complex)          elementInt32      : common.isHalf ? (System.Half) elementInt32        : common.isInt128 ? (System.Int128) elementInt32        : common.isNFloat ? (System.Runtime.InteropServices.NFloat)          elementInt32        : common.isUInt128 ? (System.UInt128) elementInt32        : Convert(elementInt32,      common.type),
          long                                  elementInt64      => common.isBigInteger ? (System.Numerics.BigInteger)          elementInt64      : common.isComplex ? (System.Numerics.Complex)          elementInt64      : common.isHalf ? (System.Half) elementInt64        : common.isInt128 ? (System.Int128) elementInt64        : common.isNFloat ? (System.Runtime.InteropServices.NFloat)          elementInt64        : common.isUInt128 ? (System.UInt128) elementInt64        : Convert(elementInt64,      common.type),
          nint                                  elementIntPtr     => common.isBigInteger ? (System.Numerics.BigInteger)          elementIntPtr     : common.isComplex ? (System.Numerics.Complex)          elementIntPtr     : common.isHalf ? (System.Half) elementIntPtr       : common.isInt128 ? (System.Int128) elementIntPtr       : common.isNFloat ? (System.Runtime.InteropServices.NFloat)          elementIntPtr       : common.isUInt128 ? (System.UInt128) elementIntPtr       : Convert(elementIntPtr,     common.type),
          nuint                                 elementUIntPtr    => common.isBigInteger ? (System.Numerics.BigInteger)          elementUIntPtr    : common.isComplex ? (System.Numerics.Complex)          elementUIntPtr    : common.isHalf ? (System.Half) elementUIntPtr      : common.isInt128 ? (System.Int128) elementUIntPtr      : common.isNFloat ? (System.Runtime.InteropServices.NFloat)          elementUIntPtr      : common.isUInt128 ? (System.UInt128) elementUIntPtr      : Convert(elementUIntPtr,    common.type),
          sbyte                                 elementSByte      => common.isBigInteger ? (System.Numerics.BigInteger)          elementSByte      : common.isComplex ? (System.Numerics.Complex)          elementSByte      : common.isHalf ? (System.Half) elementSByte        : common.isInt128 ? (System.Int128) elementSByte        : common.isNFloat ? (System.Runtime.InteropServices.NFloat)          elementSByte        : common.isUInt128 ? (System.UInt128) elementSByte        : Convert(elementSByte,      common.type),
          short                                 elementInt16      => common.isBigInteger ? (System.Numerics.BigInteger)          elementInt16      : common.isComplex ? (System.Numerics.Complex)          elementInt16      : common.isHalf ? (System.Half) elementInt16        : common.isInt128 ? (System.Int128) elementInt16        : common.isNFloat ? (System.Runtime.InteropServices.NFloat)          elementInt16        : common.isUInt128 ? (System.UInt128) elementInt16        : Convert(elementInt16,      common.type),
          uint                                  elementUInt32     => common.isBigInteger ? (System.Numerics.BigInteger)          elementUInt32     : common.isComplex ? (System.Numerics.Complex)          elementUInt32     : common.isHalf ? (System.Half) elementUInt32       : common.isInt128 ? (System.Int128) elementUInt32       : common.isNFloat ? (System.Runtime.InteropServices.NFloat)          elementUInt32       : common.isUInt128 ? (System.UInt128) elementUInt32       : Convert(elementUInt32,     common.type),
          ulong                                 elementUInt64     => common.isBigInteger ? (System.Numerics.BigInteger)          elementUInt64     : common.isComplex ? (System.Numerics.Complex)          elementUInt64     : common.isHalf ? (System.Half) elementUInt64       : common.isInt128 ? (System.Int128) elementUInt64       : common.isNFloat ? (System.Runtime.InteropServices.NFloat)          elementUInt64       : common.isUInt128 ? (System.UInt128) elementUInt64       : Convert(elementUInt64,     common.type),
          ushort                                elementUInt16     => common.isBigInteger ? (System.Numerics.BigInteger)          elementUInt16     : common.isComplex ? (System.Numerics.Complex)          elementUInt16     : common.isHalf ? (System.Half) elementUInt16       : common.isInt128 ? (System.Int128) elementUInt16       : common.isNFloat ? (System.Runtime.InteropServices.NFloat)          elementUInt16       : common.isUInt128 ? (System.UInt128) elementUInt16       : Convert(elementUInt16,     common.type),
          System.Half                           elementHalf       => common.isBigInteger ? (System.Numerics.BigInteger)          elementHalf       : common.isComplex ? (System.Numerics.Complex)          elementHalf       : common.isHalf ? (System.Half) elementHalf         : common.isInt128 ? (System.Int128) elementHalf         : common.isNFloat ? (System.Runtime.InteropServices.NFloat)          elementHalf         : common.isUInt128 ? (System.UInt128) elementHalf         : Convert(elementHalf,       common.type),
          System.Int128                         elementInt128     => common.isBigInteger ? (System.Numerics.BigInteger)          elementInt128     : common.isComplex ? (System.Numerics.Complex)          elementInt128     : common.isHalf ? (System.Half) elementInt128       : common.isInt128 ? (System.Int128) elementInt128       : common.isNFloat ? (System.Runtime.InteropServices.NFloat)          elementInt128       : common.isUInt128 ? (System.UInt128) elementInt128       : Convert(elementInt128,     common.type),
          System.Numerics.BigInteger            elementBigInteger => common.isBigInteger ?                                       elementBigInteger : common.isComplex ? (System.Numerics.Complex)          elementBigInteger : common.isHalf ? (System.Half) elementBigInteger   : common.isInt128 ? (System.Int128) elementBigInteger   : common.isNFloat ? (System.Runtime.InteropServices.NFloat) (double) elementBigInteger   : common.isUInt128 ? (System.UInt128) elementBigInteger   : Convert(elementBigInteger, common.type),
          System.Numerics.Complex               elementComplex    => common.isBigInteger ? (System.Numerics.BigInteger)          elementComplex    : common.isComplex ? (System.Numerics.Complex)          elementComplex    : common.isHalf ? (System.Half) elementComplex.Real : common.isInt128 ? (System.Int128) elementComplex.Real : common.isNFloat ? (System.Runtime.InteropServices.NFloat)          elementComplex.Real : common.isUInt128 ? (System.UInt128) elementComplex.Real : Convert(elementComplex,    common.type),
          System.Runtime.InteropServices.NFloat elementNFloat     => common.isBigInteger ? (System.Numerics.BigInteger) (double) elementNFloat     : common.isComplex ? (System.Numerics.Complex) (double) elementNFloat     : common.isHalf ? (System.Half) elementNFloat       : common.isInt128 ? (System.Int128) elementNFloat       : common.isNFloat ? (System.Runtime.InteropServices.NFloat)          elementNFloat       : common.isUInt128 ? (System.UInt128) elementNFloat       : Convert(elementNFloat,     common.type),
          System.UInt128                        elementUInt128    => common.isBigInteger ? (System.Numerics.BigInteger)          elementUInt128    : common.isComplex ? (System.Numerics.Complex)          elementUInt128    : common.isHalf ? (System.Half) elementUInt128      : common.isInt128 ? (System.Int128) elementUInt128      : common.isNFloat ? (System.Runtime.InteropServices.NFloat)          elementUInt128      : common.isUInt128 ? (System.UInt128) elementUInt128      : Convert(elementUInt128,    common.type),
          null                                                    => null,
          _                                                       => tuple![length]
        }, length);
      }
    }

    return array;
  }

  public static System.Runtime.CompilerServices.ITuple AsTuple<T>(this    T[]                    array) => ((System.Array) array).AsTuple();
  public static System.Runtime.CompilerServices.ITuple AsTuple<T>(this in System.ReadOnlySpan<T> span)  => span.ToArray()        .AsTuple();
  public static System.Runtime.CompilerServices.ITuple AsTuple(this System.Array array) {
    uint length = (uint) (array?.Length ?? 0);

    // ...
    if (0u != length && array!.GetType().GetElementType() is System.Type type) {
      object      tuple       = array.GetValue(length - 1u)!;
      uint        tupleCount  = (length / 7u) * 7u;
      System.Type tupleType   = type;
      bool        unmaximized = length != 7u;

      // ...
      if (length != tupleCount) {
        uint          count        = length - tupleCount;
        object[]      arguments    = new object     [count];
        System.Type[] genericTypes = new System.Type[count];

        // ...
        System.Array.Copy(array, length -= count, arguments, 0u, count);
        genericTypes = System.Array.ConvertAll(new System.Type[count], _ => type); // --> System.Array.Fill(…);

        tupleType = (count switch {
          1u => typeof(System.ValueTuple<>),
          2u => typeof(System.ValueTuple<,>),
          3u => typeof(System.ValueTuple<,,>),
          4u => typeof(System.ValueTuple<,,,>),
          5u => typeof(System.ValueTuple<,,,,>),
          6u => typeof(System.ValueTuple<,,,,,>),
          _  => System.Type.GetType("System.ValueTuple`" + count)!
        }).MakeGenericType(genericTypes);
        tuple = System.Activator.CreateInstance(tupleType, arguments)!;
      }

      if (0u != tupleCount) {
        uint          count        = 6u + (unmaximized ? 1u : 0u);
        object[]      arguments    = new object     [count + 1u];
        System.Type[] genericTypes = new System.Type[count + 1u];
        System.Type   subtupleType = unmaximized ? typeof(System.ValueTuple<,,,,,,,>) : typeof(System.ValueTuple<,,,,,,>);

        // ...
        for (genericTypes = /* --> System.Array.Fill(…); */ System.Array.ConvertAll(genericTypes, _ => type); 0u != tupleCount; tupleCount -= 7u) {
          System.Array.Copy(array, length -= 7u, arguments, 0u, 7u);

          arguments   [count] = tuple!;
          genericTypes[count] = tupleType;
          tupleType           = subtupleType.MakeGenericType(genericTypes);
          tuple               = System.Activator.CreateInstance(tupleType, arguments)!;
        }
      }

      return (System.Runtime.CompilerServices.ITuple) tuple!;
    }

    return System.ValueTuple.Create();
  }

  public static void Deconstruct<T>(this T[]                       array, out T itemA)                                                                                            { itemA = array[0]; }
  public static void Deconstruct<T>(this T[]                       array, out T itemA, out T itemB)                                                                               { itemB = array[1]; itemA = array[0]; }
  public static void Deconstruct<T>(this T[]                       array, out T itemA, out T itemB, out T itemC)                                                                  { itemC = array[2]; itemB = array[1]; itemA = array[0]; }
  public static void Deconstruct<T>(this T[]                       array, out T itemA, out T itemB, out T itemC, out T itemD)                                                     { itemD = array[3]; itemC = array[2]; itemB = array[1]; itemA = array[0]; }
  public static void Deconstruct<T>(this T[]                       array, out T itemA, out T itemB, out T itemC, out T itemD, out T itemE)                                        { itemE = array[4]; itemD = array[3]; itemC = array[2]; itemB = array[1]; itemA = array[0]; }
  public static void Deconstruct<T>(this T[]                       array, out T itemA, out T itemB, out T itemC, out T itemD, out T itemE, out T itemF)                           { itemF = array[5]; itemE = array[4]; itemD = array[3]; itemC = array[2]; itemB = array[1]; itemA = array[0]; }
  public static void Deconstruct<T>(this T[]                       array, out T itemA, out T itemB, out T itemC, out T itemD, out T itemE, out T itemF, out T itemG)              { itemG = array[6]; itemF = array[5]; itemE = array[4]; itemD = array[3]; itemC = array[2]; itemB = array[1]; itemA = array[0]; }
  public static void Deconstruct<T>(this T[]                       array, out T itemA, out T itemB, out T itemC, out T itemD, out T itemE, out T itemF, out T itemG, out T itemH) { itemH = array[7]; itemG = array[6]; itemF = array[5]; itemE = array[4]; itemD = array[3]; itemC = array[2]; itemB = array[1]; itemA = array[0]; }
  public static void Deconstruct<T>(this in System.ReadOnlySpan<T> span,  out T itemA)                                                                                            { itemA = span [0]; }
  public static void Deconstruct<T>(this in System.ReadOnlySpan<T> span,  out T itemA, out T itemB)                                                                               { itemB = span [1]; itemA = span[0]; }
  public static void Deconstruct<T>(this in System.ReadOnlySpan<T> span,  out T itemA, out T itemB, out T itemC)                                                                  { itemC = span [2]; itemB = span[1]; itemA = span[0]; }
  public static void Deconstruct<T>(this in System.ReadOnlySpan<T> span,  out T itemA, out T itemB, out T itemC, out T itemD)                                                     { itemD = span [3]; itemC = span[2]; itemB = span[1]; itemA = span[0]; }
  public static void Deconstruct<T>(this in System.ReadOnlySpan<T> span,  out T itemA, out T itemB, out T itemC, out T itemD, out T itemE)                                        { itemE = span [4]; itemD = span[3]; itemC = span[2]; itemB = span[1]; itemA = span[0]; }
  public static void Deconstruct<T>(this in System.ReadOnlySpan<T> span,  out T itemA, out T itemB, out T itemC, out T itemD, out T itemE, out T itemF)                           { itemF = span [5]; itemE = span[4]; itemD = span[3]; itemC = span[2]; itemB = span[1]; itemA = span[0]; }
  public static void Deconstruct<T>(this in System.ReadOnlySpan<T> span,  out T itemA, out T itemB, out T itemC, out T itemD, out T itemE, out T itemF, out T itemG)              { itemG = span [6]; itemF = span[5]; itemE = span[4]; itemD = span[3]; itemC = span[2]; itemB = span[1]; itemA = span[0]; }
  public static void Deconstruct<T>(this in System.ReadOnlySpan<T> span,  out T itemA, out T itemB, out T itemC, out T itemD, out T itemE, out T itemF, out T itemG, out T itemH) { itemH = span [7]; itemG = span[6]; itemF = span[5]; itemE = span[4]; itemD = span[3]; itemC = span[2]; itemB = span[1]; itemA = span[0]; }

  private static System.Type? Promote(System.Type typeA, System.Type typeB) {
    // ... --> Loosely based off C# promotion rules; See `https://1drv.ms/t/c/2fefd85231f1db0d/ESmdZhBYgWZCt7CFZbjf-_0BpCu-NBorMsaV-nOHzj459w?e=ZbPLmr`
    // ┌-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------┐
    // │ …                                                        │ byte                                  │ char                                  │ decimal │ double                  │ float                                        │ int                                   │ long                                  │ nint (32 bits, 64 bits)               │ nuint (32 bits, 64 bits)              │ sbyte                                 │ short                                 │ uint                                  │ ulong                                 │ ushort                                │ System.Half                           │ System.Int128                         │ System.Numerics.BigInteger │ System.Numerics.Complex │ System.Runtime.InteropServices.NFloat (32 bits, 64 bits) │ System.UInt128                        │
    // ├ -------------------------------------------------------- ┼ ------------------------------------- ┼ ------------------------------------- ┼ ------- ┼ ----------------------- ┼ -------------------------------------------- ┼ ------------------------------------- ┼ ------------------------------------- ┼ ------------------------------------- ┼ ------------------------------------- ┼ ------------------------------------- ┼ ------------------------------------- ┼ ------------------------------------- ┼ ------------------------------------- ┼ ------------------------------------- ┼ ------------------------------------- ┼ ------------------------------------- ┼ -------------------------- ┼ ----------------------- ┼ -------------------------------------------------------- ┼ ------------------------------------- ┤
    // │ byte                                                     │ byte                                  │ int                                   │ decimal │ double                  │ float                                        │ int                                   │ long                                  │ nint                                  │ nuint                                 │ int                                   │ int                                   │ uint                                  │ ulong                                 │ int                                   │ System.Half                           │ System.Int128                         │ System.Numerics.BigInteger │ System.Numerics.Complex │ System.Runtime.InteropServices.NFloat                    │ System.UInt128                        │
    // │ char                                                     │ int                                   │ char                                  │ decimal │ double                  │ float                                        │ int                                   │ long                                  │ nint                                  │ nuint                                 │ int                                   │ int                                   │ uint                                  │ ulong                                 │ int                                   │ System.Half                           │ System.Int128                         │ System.Numerics.BigInteger │ System.Numerics.Complex │ System.Runtime.InteropServices.NFloat                    │ System.UInt128                        │
    // │ decimal                                                  │ decimal                               │ decimal                               │ decimal │ -                       │ -                                            │ decimal                               │ decimal                               │ decimal                               │ decimal                               │ decimal                               │ decimal                               │ decimal                               │ decimal                               │ decimal                               │ -                                     │ -                                     │ -                          │ -                       │ -                                                        │ -                                     │
    // │ double                                                   │ double                                │ double                                │ -       │ double                  │ double                                       │ double                                │ double                                │ double                                │ double                                │ double                                │ double                                │ double                                │ double                                │ double                                │ double                                │ double                                │ -                          │ System.Numerics.Complex │ double                                                   │ double                                │
    // │ float                                                    │ float                                 │ float                                 │ -       │ double                  │ float                                        │ float                                 │ float                                 │ float                                 │ float                                 │ float                                 │ float                                 │ float                                 │ float                                 │ float                                 │ float                                 │ float                                 │ -                          │ System.Numerics.Complex │ float, System.Runtime.InteropServices.NFloat             │ float                                 │
    // │ int                                                      │ int                                   │ int                                   │ decimal │ double                  │ float                                        │ int                                   │ long                                  │ int, nint                             │ long, System.Int128                   │ int                                   │ int                                   │ long                                  │ System.Int128                         │ int                                   │ System.Half                           │ System.Int128                         │ System.Numerics.BigInteger │ System.Numerics.Complex │ System.Runtime.InteropServices.NFloat                    │ -                                     │
    // │ long                                                     │ long                                  │ long                                  │ decimal │ double                  │ float                                        │ long                                  │ long                                  │ long                                  │ long, System.Int128                   │ long                                  │ long                                  │ long                                  │ System.Int128                         │ long                                  │ System.Half                           │ System.Int128                         │ System.Numerics.BigInteger │ System.Numerics.Complex │ System.Runtime.InteropServices.NFloat                    │ -                                     │
    // │ nint  (32 bits, 64 bits)                                 │ nint                                  │ nint                                  │ decimal │ double                  │ float                                        │ int,  nint                            │ long                                  │ nint                                  │ long, System.Int128                   │ nint                                  │ nint                                  │ long                                  │ System.Int128                         │ nint                                  │ System.Half                           │ System.Int128                         │ System.Numerics.BigInteger │ System.Numerics.Complex │ System.Runtime.InteropServices.NFloat                    │ -                                     │
    // │ nuint (32 bits, 64 bits)                                 │ nuint                                 │ nuint                                 │ decimal │ double                  │ float                                        │ long, System.Int128                   │ long, System.Int128                   │ long, System.Int128                   │ nuint                                 │ long, System.Int128                   │ long, System.Int128                   │ uint, nuint                           │ ulong                                 │ nuint                                 │ System.Half                           │ System.Int128                         │ System.Numerics.BigInteger │ System.Numerics.Complex │ System.Runtime.InteropServices.NFloat                    │ System.UInt128                        │
    // │ sbyte                                                    │ int                                   │ int                                   │ decimal │ double                  │ float                                        │ int                                   │ long                                  │ nint                                  │ long, System.Int128                   │ sbyte                                 │ int                                   │ long                                  │ System.Int128                         │ int                                   │ System.Half                           │ System.Int128                         │ System.Numerics.BigInteger │ System.Numerics.Complex │ System.Runtime.InteropServices.NFloat                    │ -                                     │
    // │ short                                                    │ int                                   │ int                                   │ decimal │ double                  │ float                                        │ int                                   │ long                                  │ nint                                  │ long, System.Int128                   │ int                                   │ short                                 │ long                                  │ System.Int128                         │ int                                   │ System.Half                           │ System.Int128                         │ System.Numerics.BigInteger │ System.Numerics.Complex │ System.Runtime.InteropServices.NFloat                    │ -                                     │
    // │ uint                                                     │ uint                                  │ uint                                  │ decimal │ double                  │ float                                        │ long                                  │ long                                  │ long                                  │ uint, nuint                           │ long                                  │ long                                  │ uint                                  │ ulong                                 │ uint                                  │ System.Half                           │ System.Int128                         │ System.Numerics.BigInteger │ System.Numerics.Complex │ System.Runtime.InteropServices.NFloat                    │ System.UInt128                        │
    // │ ulong                                                    │ ulong                                 │ ulong                                 │ decimal │ double                  │ float                                        │ System.Int128                         │ System.Int128                         │ System.Int128                         │ ulong                                 │ System.Int128                         │ System.Int128                         │ ulong                                 │ ulong                                 │ ulong                                 │ System.Half                           │ System.Int128                         │ System.Numerics.BigInteger │ System.Numerics.Complex │ System.Runtime.InteropServices.NFloat                    │ System.UInt128                        │
    // │ ushort                                                   │ int                                   │ int                                   │ decimal │ double                  │ float                                        │ int                                   │ long                                  │ nint                                  │ nuint                                 │ int                                   │ int                                   │ uint                                  │ ulong                                 │ ushort                                │ System.Half                           │ System.Int128                         │ System.Numerics.BigInteger │ System.Numerics.Complex │ System.Runtime.InteropServices.NFloat                    │ System.UInt128                        │
    // │ System.Half                                              │ System.Half                           │ System.Half                           │ -       │ double                  │ float                                        │ System.Half                           │ System.Half                           │ System.Half                           │ System.Half                           │ System.Half                           │ System.Half                           │ System.Half                           │ System.Half                           │ System.Half                           │ System.Half                           │ System.Half                           │ -                          │ System.Numerics.Complex │ System.Runtime.InteropServices.NFloat                    │ System.Half                           │
    // │ System.Int128                                            │ System.Int128                         │ System.Int128                         │ -       │ double                  │ float                                        │ System.Int128                         │ System.Int128                         │ System.Int128                         │ System.Int128                         │ System.Int128                         │ System.Int128                         │ System.Int128                         │ System.Int128                         │ System.Int128                         │ System.Half                           │ System.Runtime.InteropServices.NFloat │ System.Numerics.BigInteger │ -                       │ System.Runtime.InteropServices.NFloat                    │ -                                     │
    // │ System.Numerics.BigInteger                               │ System.Numerics.BigInteger            │ System.Numerics.BigInteger            │ -       │ -                       │ -                                            │ System.Numerics.BigInteger            │ System.Numerics.BigInteger            │ System.Numerics.BigInteger            │ System.Numerics.BigInteger            │ System.Numerics.BigInteger            │ System.Numerics.BigInteger            │ System.Numerics.BigInteger            │ System.Numerics.BigInteger            │ System.Numerics.BigInteger            │ -                                     │ System.Numerics.BigInteger            │ System.Numerics.BigInteger │ -                       │ -                                                        │ System.Numerics.BigInteger            │
    // │ System.Numerics.Complex                                  │ System.Numerics.Complex               │ System.Numerics.Complex               │ -       │ System.Numerics.Complex │ System.Numerics.Complex                      │ System.Numerics.Complex               │ System.Numerics.Complex               │ System.Numerics.Complex               │ System.Numerics.Complex               │ System.Numerics.Complex               │ System.Numerics.Complex               │ System.Numerics.Complex               │ System.Numerics.Complex               │ System.Numerics.Complex               │ System.Numerics.Complex               │ -                                     │ -                          │ System.Numerics.Complex │ System.Numerics.Complex                                  │ -                                     │
    // │ System.Runtime.InteropServices.NFloat (32 bits, 64 bits) │ System.Runtime.InteropServices.NFloat │ System.Runtime.InteropServices.NFloat │ -       │ double                  │ float, System.Runtime.InteropServices.NFloat │ System.Runtime.InteropServices.NFloat │ System.Runtime.InteropServices.NFloat │ System.Runtime.InteropServices.NFloat │ System.Runtime.InteropServices.NFloat │ System.Runtime.InteropServices.NFloat │ System.Runtime.InteropServices.NFloat │ System.Runtime.InteropServices.NFloat │ System.Runtime.InteropServices.NFloat │ System.Runtime.InteropServices.NFloat │ System.Runtime.InteropServices.NFloat │ System.Runtime.InteropServices.NFloat │ -                          │ System.Numerics.Complex │ System.Runtime.InteropServices.NFloat                    │ System.Runtime.InteropServices.NFloat │
    // │ System.UInt128                                           │ System.UInt128                        │ System.UInt128                        │ -       │ double                  │ float                                        │ -                                     │ -                                     │ -                                     │ System.UInt128                        │ -                                     │ -                                     │ System.UInt128                        │ System.UInt128                        │ System.UInt128                        │ System.Half                           │ -                                     │ System.Numerics.BigInteger │ -                       │ System.Runtime.InteropServices.NFloat                    │ System.UInt128                        │
    // └┘
    if (typeA == typeof(byte))                                           return System.Type.GetTypeCode(typeB) switch { System.TypeCode.Byte => typeof(byte),                                  System.TypeCode.Char => typeof(int),                                   System.TypeCode.Decimal => typeof(decimal), System.TypeCode.Double => typeof(double),                  System.TypeCode.Int16 => typeof(int),                                                          System.TypeCode.Int32 => typeof(int),                                                          System.TypeCode.Int64 => typeof(long),                                                         System.TypeCode.SByte => typeof(int),                                                          System.TypeCode.Single => typeof(float),                                                                                                                  System.TypeCode.UInt16 => typeof(int),                                   System.TypeCode.UInt32 => typeof(uint),                                                 System.TypeCode.UInt64 => typeof(ulong),                                 _ => typeB == typeof(nint) ? typeof(nint)                                                         : typeB == typeof(nuint) ? typeof(nuint)                                                        : typeB == typeof(System.Half) ? typeof(System.Half)                           : typeB == typeof(System.Int128) ? typeof(System.Int128)                         : typeB == typeof(System.Numerics.BigInteger) ? typeof(System.Numerics.BigInteger) : typeB == typeof(System.Numerics.Complex) ? typeof(System.Numerics.Complex) : typeB == typeof(System.Runtime.InteropServices.NFloat) ? typeof(System.Runtime.InteropServices.NFloat)                                                                                  : typeB == typeof(System.UInt128) ? typeof(System.UInt128)                        : null };
    if (typeA == typeof(char))                                           return System.Type.GetTypeCode(typeB) switch { System.TypeCode.Byte => typeof(int),                                   System.TypeCode.Char => typeof(char),                                  System.TypeCode.Decimal => typeof(decimal), System.TypeCode.Double => typeof(double),                  System.TypeCode.Int16 => typeof(int),                                                          System.TypeCode.Int32 => typeof(int),                                                          System.TypeCode.Int64 => typeof(long),                                                         System.TypeCode.SByte => typeof(int),                                                          System.TypeCode.Single => typeof(float),                                                                                                                  System.TypeCode.UInt16 => typeof(int),                                   System.TypeCode.UInt32 => typeof(uint),                                                 System.TypeCode.UInt64 => typeof(ulong),                                 _ => typeB == typeof(nint) ? typeof(nint)                                                         : typeB == typeof(nuint) ? typeof(nuint)                                                        : typeB == typeof(System.Half) ? typeof(System.Half)                           : typeB == typeof(System.Int128) ? typeof(System.Int128)                         : typeB == typeof(System.Numerics.BigInteger) ? typeof(System.Numerics.BigInteger) : typeB == typeof(System.Numerics.Complex) ? typeof(System.Numerics.Complex) : typeB == typeof(System.Runtime.InteropServices.NFloat) ? typeof(System.Runtime.InteropServices.NFloat)                                                                                  : typeB == typeof(System.UInt128) ? typeof(System.UInt128)                        : null };
    if (typeA == typeof(decimal))                                        return System.Type.GetTypeCode(typeB) switch { System.TypeCode.Byte => typeof(decimal),                               System.TypeCode.Char => typeof(decimal),                               System.TypeCode.Decimal => typeof(decimal), System.TypeCode.Double => null,                            System.TypeCode.Int16 => typeof(decimal),                                                      System.TypeCode.Int32 => typeof(decimal),                                                      System.TypeCode.Int64 => typeof(decimal),                                                      System.TypeCode.SByte => typeof(decimal),                                                      System.TypeCode.Single => null,                                                                                                                           System.TypeCode.UInt16 => typeof(decimal),                               System.TypeCode.UInt32 => typeof(decimal),                                              System.TypeCode.UInt64 => typeof(decimal),                               _ => typeB == typeof(nint) ? typeof(decimal)                                                      : typeB == typeof(nuint) ? typeof(decimal)                                                      : typeB == typeof(System.Half) ? null                                          : typeB == typeof(System.Int128) ? null                                          : typeB == typeof(System.Numerics.BigInteger) ? null                               : typeB == typeof(System.Numerics.Complex) ? null                            : typeB == typeof(System.Runtime.InteropServices.NFloat) ? null                                                                                                                           : typeB == typeof(System.UInt128) ? null                                          : null };
    if (typeA == typeof(double))                                         return System.Type.GetTypeCode(typeB) switch { System.TypeCode.Byte => typeof(double),                                System.TypeCode.Char => typeof(double),                                System.TypeCode.Decimal => null,            System.TypeCode.Double => typeof(double),                  System.TypeCode.Int16 => typeof(double),                                                       System.TypeCode.Int32 => typeof(double),                                                       System.TypeCode.Int64 => typeof(double),                                                       System.TypeCode.SByte => typeof(double),                                                       System.TypeCode.Single => typeof(double),                                                                                                                 System.TypeCode.UInt16 => typeof(double),                                System.TypeCode.UInt32 => typeof(double),                                               System.TypeCode.UInt64 => typeof(double),                                _ => typeB == typeof(nint) ? typeof(double)                                                       : typeB == typeof(nuint) ? typeof(double)                                                       : typeB == typeof(System.Half) ? typeof(double)                                : typeB == typeof(System.Int128) ? typeof(double)                                : typeB == typeof(System.Numerics.BigInteger) ? null                               : typeB == typeof(System.Numerics.Complex) ? typeof(System.Numerics.Complex) : typeB == typeof(System.Runtime.InteropServices.NFloat) ? typeof(double)                                                                                                                 : typeB == typeof(System.UInt128) ? typeof(double)                                : null };
    if (typeA == typeof(float))                                 unsafe { return System.Type.GetTypeCode(typeB) switch { System.TypeCode.Byte => typeof(float),                                 System.TypeCode.Char => typeof(float),                                 System.TypeCode.Decimal => null,            System.TypeCode.Double => typeof(double),                  System.TypeCode.Int16 => typeof(float),                                                        System.TypeCode.Int32 => typeof(float),                                                        System.TypeCode.Int64 => typeof(float),                                                        System.TypeCode.SByte => typeof(float),                                                        System.TypeCode.Single => typeof(float),                                                                                                                  System.TypeCode.UInt16 => typeof(float),                                 System.TypeCode.UInt32 => typeof(float),                                                System.TypeCode.UInt64 => typeof(float),                                 _ => typeB == typeof(nint) ? typeof(float)                                                        : typeB == typeof(nuint) ? typeof(float)                                                        : typeB == typeof(System.Half) ? typeof(float)                                 : typeB == typeof(System.Int128) ? typeof(float)                                 : typeB == typeof(System.Numerics.BigInteger) ? null                               : typeB == typeof(System.Numerics.Complex) ? typeof(System.Numerics.Complex) : typeB == typeof(System.Runtime.InteropServices.NFloat) ? sizeof(float) <= sizeof(System.Runtime.InteropServices.NFloat) ? typeof(float) : typeof(System.Runtime.InteropServices.NFloat) : typeB == typeof(System.UInt128) ? typeof(float)                                 : null }; }
    if (typeA == typeof(int))                                   unsafe { return System.Type.GetTypeCode(typeB) switch { System.TypeCode.Byte => typeof(int),                                   System.TypeCode.Char => typeof(int),                                   System.TypeCode.Decimal => typeof(decimal), System.TypeCode.Double => typeof(double),                  System.TypeCode.Int16 => typeof(int),                                                          System.TypeCode.Int32 => typeof(int),                                                          System.TypeCode.Int64 => typeof(long),                                                         System.TypeCode.SByte => typeof(int),                                                          System.TypeCode.Single => typeof(float),                                                                                                                  System.TypeCode.UInt16 => typeof(int),                                   System.TypeCode.UInt32 => typeof(long),                                                 System.TypeCode.UInt64 => typeof(System.Int128),                         _ => typeB == typeof(nint) ? sizeof(int) <= sizeof(nint) ? typeof(int) : typeof(nint)             : typeB == typeof(nuint) ? sizeof(nuint) <= sizeof(uint) ? typeof(long) : typeof(System.Int128) : typeB == typeof(System.Half) ? typeof(System.Half)                           : typeB == typeof(System.Int128) ? typeof(System.Int128)                         : typeB == typeof(System.Numerics.BigInteger) ? typeof(System.Numerics.BigInteger) : typeB == typeof(System.Numerics.Complex) ? typeof(System.Numerics.Complex) : typeB == typeof(System.Runtime.InteropServices.NFloat) ? typeof(System.Runtime.InteropServices.NFloat)                                                                                  : typeB == typeof(System.UInt128) ? null                                          : null }; }
    if (typeA == typeof(long))                                  unsafe { return System.Type.GetTypeCode(typeB) switch { System.TypeCode.Byte => typeof(long),                                  System.TypeCode.Char => typeof(long),                                  System.TypeCode.Decimal => typeof(decimal), System.TypeCode.Double => typeof(double),                  System.TypeCode.Int16 => typeof(long),                                                         System.TypeCode.Int32 => typeof(long),                                                         System.TypeCode.Int64 => typeof(long),                                                         System.TypeCode.SByte => typeof(long),                                                         System.TypeCode.Single => typeof(float),                                                                                                                  System.TypeCode.UInt16 => typeof(long),                                  System.TypeCode.UInt32 => typeof(long),                                                 System.TypeCode.UInt64 => typeof(System.Int128),                         _ => typeB == typeof(nint) ? typeof(long)                                                         : typeB == typeof(nuint) ? sizeof(nuint) <= sizeof(uint) ? typeof(long) : typeof(System.Int128) : typeB == typeof(System.Half) ? typeof(System.Half)                           : typeB == typeof(System.Int128) ? typeof(System.Int128)                         : typeB == typeof(System.Numerics.BigInteger) ? typeof(System.Numerics.BigInteger) : typeB == typeof(System.Numerics.Complex) ? typeof(System.Numerics.Complex) : typeB == typeof(System.Runtime.InteropServices.NFloat) ? typeof(System.Runtime.InteropServices.NFloat)                                                                                  : typeB == typeof(System.UInt128) ? null                                          : null }; }
    if (typeA == typeof(nint))                                  unsafe { return System.Type.GetTypeCode(typeB) switch { System.TypeCode.Byte => typeof(nint),                                  System.TypeCode.Char => typeof(nint),                                  System.TypeCode.Decimal => typeof(decimal), System.TypeCode.Double => typeof(double),                  System.TypeCode.Int16 => typeof(nint),                                                         System.TypeCode.Int32 => sizeof(nint)  <= sizeof(int)  ? typeof(int)  : typeof(nint),          System.TypeCode.Int64 => typeof(long),                                                         System.TypeCode.SByte => typeof(nint),                                                         System.TypeCode.Single => typeof(float),                                                                                                                  System.TypeCode.UInt16 => typeof(nint),                                  System.TypeCode.UInt32 => typeof(long),                                                 System.TypeCode.UInt64 => typeof(System.Int128),                         _ => typeB == typeof(nint) ? typeof(nint)                                                         : typeB == typeof(nuint) ? sizeof(nint)  <= sizeof(int)  ? typeof(long) : typeof(System.Int128) : typeB == typeof(System.Half) ? typeof(System.Half)                           : typeB == typeof(System.Int128) ? typeof(System.Int128)                         : typeB == typeof(System.Numerics.BigInteger) ? typeof(System.Numerics.BigInteger) : typeB == typeof(System.Numerics.Complex) ? typeof(System.Numerics.Complex) : typeB == typeof(System.Runtime.InteropServices.NFloat) ? typeof(System.Runtime.InteropServices.NFloat)                                                                                  : typeB == typeof(System.UInt128) ? null                                          : null }; }
    if (typeA == typeof(nuint))                                 unsafe { return System.Type.GetTypeCode(typeB) switch { System.TypeCode.Byte => typeof(nuint),                                 System.TypeCode.Char => typeof(nuint),                                 System.TypeCode.Decimal => typeof(decimal), System.TypeCode.Double => typeof(double),                  System.TypeCode.Int16 => sizeof(nuint) <= sizeof(uint) ? typeof(long) : typeof(System.Int128), System.TypeCode.Int32 => sizeof(nuint) <= sizeof(uint) ? typeof(long) : typeof(System.Int128), System.TypeCode.Int64 => sizeof(nuint) <= sizeof(uint) ? typeof(long) : typeof(System.Int128), System.TypeCode.SByte => sizeof(nuint) <= sizeof(uint) ? typeof(long) : typeof(System.Int128), System.TypeCode.Single => typeof(float),                                                                                                                  System.TypeCode.UInt16 => typeof(nuint),                                 System.TypeCode.UInt32 => sizeof(nuint) <= sizeof(uint) ? typeof(uint) : typeof(nuint), System.TypeCode.UInt64 => typeof(ulong),                                 _ => typeB == typeof(nint) ? sizeof(nuint) <= sizeof(uint) ? typeof(long) : typeof(System.Int128) : typeB == typeof(nuint) ? typeof(nuint)                                                        : typeB == typeof(System.Half) ? typeof(System.Half)                           : typeB == typeof(System.Int128) ? typeof(System.Int128)                         : typeB == typeof(System.Numerics.BigInteger) ? typeof(System.Numerics.BigInteger) : typeB == typeof(System.Numerics.Complex) ? typeof(System.Numerics.Complex) : typeB == typeof(System.Runtime.InteropServices.NFloat) ? typeof(System.Runtime.InteropServices.NFloat)                                                                                  : typeB == typeof(System.UInt128) ? typeof(System.UInt128)                        : null }; }
    if (typeA == typeof(sbyte))                                 unsafe { return System.Type.GetTypeCode(typeB) switch { System.TypeCode.Byte => typeof(int),                                   System.TypeCode.Char => typeof(int),                                   System.TypeCode.Decimal => typeof(decimal), System.TypeCode.Double => typeof(double),                  System.TypeCode.Int16 => typeof(int),                                                          System.TypeCode.Int32 => typeof(int),                                                          System.TypeCode.Int64 => typeof(long),                                                         System.TypeCode.SByte => typeof(sbyte),                                                        System.TypeCode.Single => typeof(float),                                                                                                                  System.TypeCode.UInt16 => typeof(int),                                   System.TypeCode.UInt32 => typeof(long),                                                 System.TypeCode.UInt64 => typeof(System.Int128),                         _ => typeB == typeof(nint) ? typeof(nint)                                                         : typeB == typeof(nuint) ? sizeof(nuint) <= sizeof(uint) ? typeof(long) : typeof(System.Int128) : typeB == typeof(System.Half) ? typeof(System.Half)                           : typeB == typeof(System.Int128) ? typeof(System.Int128)                         : typeB == typeof(System.Numerics.BigInteger) ? typeof(System.Numerics.BigInteger) : typeB == typeof(System.Numerics.Complex) ? typeof(System.Numerics.Complex) : typeB == typeof(System.Runtime.InteropServices.NFloat) ? typeof(System.Runtime.InteropServices.NFloat)                                                                                  : typeB == typeof(System.UInt128) ? null                                          : null }; }
    if (typeA == typeof(short))                                 unsafe { return System.Type.GetTypeCode(typeB) switch { System.TypeCode.Byte => typeof(int),                                   System.TypeCode.Char => typeof(int),                                   System.TypeCode.Decimal => typeof(decimal), System.TypeCode.Double => typeof(double),                  System.TypeCode.Int16 => typeof(short),                                                        System.TypeCode.Int32 => typeof(int),                                                          System.TypeCode.Int64 => typeof(long),                                                         System.TypeCode.SByte => typeof(int),                                                          System.TypeCode.Single => typeof(float),                                                                                                                  System.TypeCode.UInt16 => typeof(int),                                   System.TypeCode.UInt32 => typeof(long),                                                 System.TypeCode.UInt64 => typeof(System.Int128),                         _ => typeB == typeof(nint) ? typeof(nint)                                                         : typeB == typeof(nuint) ? sizeof(nuint) <= sizeof(uint) ? typeof(long) : typeof(System.Int128) : typeB == typeof(System.Half) ? typeof(System.Half)                           : typeB == typeof(System.Int128) ? typeof(System.Int128)                         : typeB == typeof(System.Numerics.BigInteger) ? typeof(System.Numerics.BigInteger) : typeB == typeof(System.Numerics.Complex) ? typeof(System.Numerics.Complex) : typeB == typeof(System.Runtime.InteropServices.NFloat) ? typeof(System.Runtime.InteropServices.NFloat)                                                                                  : typeB == typeof(System.UInt128) ? null                                          : null }; }
    if (typeA == typeof(uint))                                  unsafe { return System.Type.GetTypeCode(typeB) switch { System.TypeCode.Byte => typeof(uint),                                  System.TypeCode.Char => typeof(uint),                                  System.TypeCode.Decimal => typeof(decimal), System.TypeCode.Double => typeof(double),                  System.TypeCode.Int16 => typeof(long),                                                         System.TypeCode.Int32 => typeof(long),                                                         System.TypeCode.Int64 => typeof(long),                                                         System.TypeCode.SByte => typeof(long),                                                         System.TypeCode.Single => typeof(float),                                                                                                                  System.TypeCode.UInt16 => typeof(uint),                                  System.TypeCode.UInt32 => typeof(uint),                                                 System.TypeCode.UInt64 => typeof(ulong),                                 _ => typeB == typeof(nint) ? typeof(long)                                                         : typeB == typeof(nuint) ? sizeof(nuint) <= sizeof(uint) ? typeof(uint) : typeof(nuint)         : typeB == typeof(System.Half) ? typeof(System.Half)                           : typeB == typeof(System.Int128) ? typeof(System.Int128)                         : typeB == typeof(System.Numerics.BigInteger) ? typeof(System.Numerics.BigInteger) : typeB == typeof(System.Numerics.Complex) ? typeof(System.Numerics.Complex) : typeB == typeof(System.Runtime.InteropServices.NFloat) ? typeof(System.Runtime.InteropServices.NFloat)                                                                                  : typeB == typeof(System.UInt128) ? typeof(System.UInt128)                        : null }; }
    if (typeA == typeof(ulong))                                          return System.Type.GetTypeCode(typeB) switch { System.TypeCode.Byte => typeof(ulong),                                 System.TypeCode.Char => typeof(ulong),                                 System.TypeCode.Decimal => typeof(decimal), System.TypeCode.Double => typeof(double),                  System.TypeCode.Int16 => typeof(System.Int128),                                                System.TypeCode.Int32 => typeof(System.Int128),                                                System.TypeCode.Int64 => typeof(System.Int128),                                                System.TypeCode.SByte => typeof(System.Int128),                                                System.TypeCode.Single => typeof(float),                                                                                                                  System.TypeCode.UInt16 => typeof(ulong),                                 System.TypeCode.UInt32 => typeof(ulong),                                                System.TypeCode.UInt64 => typeof(ulong),                                 _ => typeB == typeof(nint) ? typeof(System.Int128)                                                : typeB == typeof(nuint) ? typeof(ulong)                                                        : typeB == typeof(System.Half) ? typeof(System.Half)                           : typeB == typeof(System.Int128) ? typeof(System.Int128)                         : typeB == typeof(System.Numerics.BigInteger) ? typeof(System.Numerics.BigInteger) : typeB == typeof(System.Numerics.Complex) ? typeof(System.Numerics.Complex) : typeB == typeof(System.Runtime.InteropServices.NFloat) ? typeof(System.Runtime.InteropServices.NFloat)                                                                                  : typeB == typeof(System.UInt128) ? typeof(System.UInt128)                        : null };
    if (typeA == typeof(ushort))                                         return System.Type.GetTypeCode(typeB) switch { System.TypeCode.Byte => typeof(int),                                   System.TypeCode.Char => typeof(int),                                   System.TypeCode.Decimal => typeof(decimal), System.TypeCode.Double => typeof(double),                  System.TypeCode.Int16 => typeof(int),                                                          System.TypeCode.Int32 => typeof(int),                                                          System.TypeCode.Int64 => typeof(long),                                                         System.TypeCode.SByte => typeof(int),                                                          System.TypeCode.Single => typeof(float),                                                                                                                  System.TypeCode.UInt16 => typeof(ushort),                                System.TypeCode.UInt32 => typeof(uint),                                                 System.TypeCode.UInt64 => typeof(ulong),                                 _ => typeB == typeof(nint) ? typeof(nint)                                                         : typeB == typeof(nuint) ? typeof(nuint)                                                        : typeB == typeof(System.Half) ? typeof(System.Half)                           : typeB == typeof(System.Int128) ? typeof(System.Int128)                         : typeB == typeof(System.Numerics.BigInteger) ? typeof(System.Numerics.BigInteger) : typeB == typeof(System.Numerics.Complex) ? typeof(System.Numerics.Complex) : typeB == typeof(System.Runtime.InteropServices.NFloat) ? typeof(System.Runtime.InteropServices.NFloat)                                                                                  : typeB == typeof(System.UInt128) ? typeof(System.UInt128)                        : null };
    if (typeA == typeof(System.Half))                                    return System.Type.GetTypeCode(typeB) switch { System.TypeCode.Byte => typeof(System.Half),                           System.TypeCode.Char => typeof(System.Half),                           System.TypeCode.Decimal => null,            System.TypeCode.Double => typeof(double),                  System.TypeCode.Int16 => typeof(System.Half),                                                  System.TypeCode.Int32 => typeof(System.Half),                                                  System.TypeCode.Int64 => typeof(System.Half),                                                  System.TypeCode.SByte => typeof(System.Half),                                                  System.TypeCode.Single => typeof(float),                                                                                                                  System.TypeCode.UInt16 => typeof(System.Half),                           System.TypeCode.UInt32 => typeof(System.Half),                                          System.TypeCode.UInt64 => typeof(System.Half),                           _ => typeB == typeof(nint) ? typeof(System.Half)                                                  : typeB == typeof(nuint) ? typeof(System.Half)                                                  : typeB == typeof(System.Half) ? typeof(System.Half)                           : typeB == typeof(System.Int128) ? typeof(System.Half)                           : typeB == typeof(System.Numerics.BigInteger) ? null                               : typeB == typeof(System.Numerics.Complex) ? typeof(System.Numerics.Complex) : typeB == typeof(System.Runtime.InteropServices.NFloat) ? typeof(System.Runtime.InteropServices.NFloat)                                                                                  : typeB == typeof(System.UInt128) ? typeof(System.Half)                           : null };
    if (typeA == typeof(System.Int128))                                  return System.Type.GetTypeCode(typeB) switch { System.TypeCode.Byte => typeof(System.Int128),                         System.TypeCode.Char => typeof(System.Int128),                         System.TypeCode.Decimal => null,            System.TypeCode.Double => typeof(double),                  System.TypeCode.Int16 => typeof(System.Int128),                                                System.TypeCode.Int32 => typeof(System.Int128),                                                System.TypeCode.Int64 => typeof(System.Int128),                                                System.TypeCode.SByte => typeof(System.Int128),                                                System.TypeCode.Single => typeof(float),                                                                                                                  System.TypeCode.UInt16 => typeof(System.Int128),                         System.TypeCode.UInt32 => typeof(System.Int128),                                        System.TypeCode.UInt64 => typeof(System.Int128),                         _ => typeB == typeof(nint) ? typeof(System.Int128)                                                : typeB == typeof(nuint) ? typeof(System.Int128)                                                : typeB == typeof(System.Half) ? typeof(System.Half)                           : typeB == typeof(System.Int128) ? typeof(System.Runtime.InteropServices.NFloat) : typeB == typeof(System.Numerics.BigInteger) ? typeof(System.Numerics.BigInteger) : typeB == typeof(System.Numerics.Complex) ? null                            : typeB == typeof(System.Runtime.InteropServices.NFloat) ? typeof(System.Runtime.InteropServices.NFloat)                                                                                  : typeB == typeof(System.UInt128) ? null                                          : null };
    if (typeA == typeof(System.Numerics.BigInteger))                     return System.Type.GetTypeCode(typeB) switch { System.TypeCode.Byte => typeof(System.Numerics.BigInteger),            System.TypeCode.Char => typeof(System.Numerics.BigInteger),            System.TypeCode.Decimal => null,            System.TypeCode.Double => null,                            System.TypeCode.Int16 => typeof(System.Numerics.BigInteger),                                   System.TypeCode.Int32 => typeof(System.Numerics.BigInteger),                                   System.TypeCode.Int64 => typeof(System.Numerics.BigInteger),                                   System.TypeCode.SByte => typeof(System.Numerics.BigInteger),                                   System.TypeCode.Single => null,                                                                                                                           System.TypeCode.UInt16 => typeof(System.Numerics.BigInteger),            System.TypeCode.UInt32 => typeof(System.Numerics.BigInteger),                           System.TypeCode.UInt64 => typeof(System.Numerics.BigInteger),            _ => typeB == typeof(nint) ? typeof(System.Numerics.BigInteger)                                   : typeB == typeof(nuint) ? typeof(System.Numerics.BigInteger)                                   : typeB == typeof(System.Half) ? null                                          : typeB == typeof(System.Int128) ? typeof(System.Numerics.BigInteger)            : typeB == typeof(System.Numerics.BigInteger) ? typeof(System.Numerics.BigInteger) : typeB == typeof(System.Numerics.Complex) ? null                            : typeB == typeof(System.Runtime.InteropServices.NFloat) ? null                                                                                                                           : typeB == typeof(System.UInt128) ? typeof(System.Numerics.BigInteger)            : null };
    if (typeA == typeof(System.Numerics.Complex))                        return System.Type.GetTypeCode(typeB) switch { System.TypeCode.Byte => typeof(System.Numerics.Complex),               System.TypeCode.Char => typeof(System.Numerics.Complex),               System.TypeCode.Decimal => null,            System.TypeCode.Double => typeof(System.Numerics.Complex), System.TypeCode.Int16 => typeof(System.Numerics.Complex),                                      System.TypeCode.Int32 => typeof(System.Numerics.Complex),                                      System.TypeCode.Int64 => typeof(System.Numerics.Complex),                                      System.TypeCode.SByte => typeof(System.Numerics.Complex),                                      System.TypeCode.Single => typeof(System.Numerics.Complex),                                                                                                System.TypeCode.UInt16 => typeof(System.Numerics.Complex),               System.TypeCode.UInt32 => typeof(System.Numerics.Complex),                              System.TypeCode.UInt64 => typeof(System.Numerics.Complex),               _ => typeB == typeof(nint) ? typeof(System.Numerics.Complex)                                      : typeB == typeof(nuint) ? typeof(System.Numerics.Complex)                                      : typeB == typeof(System.Half) ? typeof(System.Numerics.Complex)               : typeB == typeof(System.Int128) ? null                                          : typeB == typeof(System.Numerics.BigInteger) ? null                               : typeB == typeof(System.Numerics.Complex) ? typeof(System.Numerics.Complex) : typeB == typeof(System.Runtime.InteropServices.NFloat) ? typeof(System.Numerics.Complex)                                                                                                : typeB == typeof(System.UInt128) ? null                                          : null };
    if (typeA == typeof(System.Runtime.InteropServices.NFloat)) unsafe { return System.Type.GetTypeCode(typeB) switch { System.TypeCode.Byte => typeof(System.Runtime.InteropServices.NFloat), System.TypeCode.Char => typeof(System.Runtime.InteropServices.NFloat), System.TypeCode.Decimal => null,            System.TypeCode.Double => typeof(double),                  System.TypeCode.Int16 => typeof(System.Runtime.InteropServices.NFloat),                        System.TypeCode.Int32 => typeof(System.Runtime.InteropServices.NFloat),                        System.TypeCode.Int64 => typeof(System.Runtime.InteropServices.NFloat),                        System.TypeCode.SByte => typeof(System.Runtime.InteropServices.NFloat),                        System.TypeCode.Single => sizeof(float) <= sizeof(System.Runtime.InteropServices.NFloat) ? typeof(float) : typeof(System.Runtime.InteropServices.NFloat), System.TypeCode.UInt16 => typeof(System.Runtime.InteropServices.NFloat), System.TypeCode.UInt32 => typeof(System.Runtime.InteropServices.NFloat),                System.TypeCode.UInt64 => typeof(System.Runtime.InteropServices.NFloat), _ => typeB == typeof(nint) ? typeof(System.Runtime.InteropServices.NFloat)                        : typeB == typeof(nuint) ? typeof(System.Runtime.InteropServices.NFloat)                        : typeB == typeof(System.Half) ? typeof(System.Runtime.InteropServices.NFloat) : typeB == typeof(System.Int128) ? typeof(System.Runtime.InteropServices.NFloat) : typeB == typeof(System.Numerics.BigInteger) ? null                               : typeB == typeof(System.Numerics.Complex) ? typeof(System.Numerics.Complex) : typeB == typeof(System.Runtime.InteropServices.NFloat) ? typeof(System.Runtime.InteropServices.NFloat)                                                                                  : typeB == typeof(System.UInt128) ? typeof(System.Runtime.InteropServices.NFloat) : null }; }
    if (typeA == typeof(System.UInt128))                                 return System.Type.GetTypeCode(typeB) switch { System.TypeCode.Byte => typeof(System.UInt128),                        System.TypeCode.Char => typeof(System.UInt128),                        System.TypeCode.Decimal => null,            System.TypeCode.Double => typeof(double),                  System.TypeCode.Int16 => null,                                                                 System.TypeCode.Int32 => null,                                                                 System.TypeCode.Int64 => null,                                                                 System.TypeCode.SByte => null,                                                                 System.TypeCode.Single => typeof(float),                                                                                                                  System.TypeCode.UInt16 => typeof(System.UInt128),                        System.TypeCode.UInt32 => typeof(System.UInt128),                                       System.TypeCode.UInt64 => typeof(System.UInt128),                        _ => typeB == typeof(nint) ? null                                                                 : typeB == typeof(nuint) ? typeof(System.UInt128)                                               : typeB == typeof(System.Half) ? typeof(System.Half)                           : typeB == typeof(System.Int128) ? null                                          : typeB == typeof(System.Numerics.BigInteger) ? typeof(System.Numerics.BigInteger) : typeB == typeof(System.Numerics.Complex) ? null                            : typeB == typeof(System.Runtime.InteropServices.NFloat) ? typeof(System.Runtime.InteropServices.NFloat)                                                                                  : typeB == typeof(System.UInt128) ? typeof(System.UInt128)                        : null };

    return null;
  }

  /* Main */
  static void Main(string[] arguments) {
    System.Console.WriteLine                  (((byte)           1, (ushort)          2)               .AsArray());
    System.Console.WriteLine                  (((char)           3, (char)            4, null as char?).AsArray());
    System.Console.WriteLine                  (((char)           5, (float)           6)               .AsArray());
    System.Console.WriteLine                  (((char)           7, (sbyte)           8)               .AsArray());
    System.Console.WriteLine                  (((float)          9, (long)           10)               .AsArray());
    System.Console.WriteLine                  (((float)         11, (System.Half)    12)               .AsArray());
    System.Console.WriteLine                  (((int)           13, (double)         14, (uint) 15)    .AsArray());
    System.Console.WriteLine(string.Join(", ", ((C)             20, (D)              21, (G) 22)       .AsArray(AsArrayOptions.Default)                                 as A               [] ?? System.Array.Empty<A>               ()));
    System.Console.WriteLine(string.Join(", ", ((int)           16, (uint)           17)               .AsArray(AsArrayOptions.Default | AsArrayOptions.ReferenceTypes) as object          [] ?? System.Array.Empty<object>          ()));
    System.Console.WriteLine(string.Join(", ", ((System.Int128) 18, (System.UInt128) 19)               .AsArray(AsArrayOptions.Default)                                 as System.ValueType[] ?? System.Array.Empty<System.ValueType>()));

    System.Console.WriteLine();

    System.Console.WriteLine(System.Array.Empty<int>()                     .AsTuple());
    System.Console.WriteLine(new int[] {1}                                 .AsTuple());
    System.Console.WriteLine(new int[] {2,   3}                            .AsTuple());
    System.Console.WriteLine(new int[] {4,   5,  6}                        .AsTuple());
    System.Console.WriteLine(new int[] {7,   8,  9, 10}                    .AsTuple());
    System.Console.WriteLine(new int[] {11, 12, 13, 14, 15}                .AsTuple());
    System.Console.WriteLine(new int[] {16, 17, 18, 19, 20, 21}            .AsTuple());
    System.Console.WriteLine(new int[] {22, 23, 24, 25, 26, 27, 28}        .AsTuple());
    System.Console.WriteLine(new int[] {29, 30, 31, 32, 33, 34, 35, 36}    .AsTuple());
    System.Console.WriteLine(new int[] {37, 38, 39, 40, 41, 42, 43, 44, 45}.AsTuple());

    System.Console.WriteLine();

    (int a, int b) = new        int[] {1, 2};
    (int c, int d) = stackalloc int[] {3, 4};
  }
}
