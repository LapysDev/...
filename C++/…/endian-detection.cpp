#include <cstdio>
#include <stdint.h>
#include <version>
#if defined __cpp_lib_endian
# include <bit>
#elif defined __GLIBC__
# include <endian.h>
#elif defined __APPLE__ || defined __ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__ || defined __MACH__ || defined __OpenBSD__ || defined OpenBSD2_0 || defined OpenBSD2_1 || defined OpenBSD2_2 || defined OpenBSD2_3 || defined OpenBSD2_4 || defined OpenBSD2_5 || defined OpenBSD2_6 || defined OpenBSD2_7 || defined OpenBSD2_8 || defined OpenBSD2_9 || defined OpenBSD3_0 || defined OpenBSD3_1 || defined OpenBSD3_2 || defined OpenBSD3_3 || defined OpenBSD3_4 || defined OpenBSD3_5 || defined OpenBSD3_6 || defined OpenBSD3_7 || defined OpenBSD3_8 || defined OpenBSD3_9 || defined OpenBSD4_0 || defined OpenBSD4_1 || defined OpenBSD4_2 || defined OpenBSD4_3 || defined OpenBSD4_4 || defined OpenBSD4_5 || defined OpenBSD4_6 || defined OpenBSD4_7 || defined OpenBSD4_8 || defined OpenBSD4_9
# include <machine/endian.h>
#elif defined __bsdi__ || defined __DragonFly__ || defined __FreeBSD__ || defined __FreeBSD_version || defined __NETBSD__ || defined __NETBSD_version || defined NetBSD0_8 || defined NetBSD0_9 || defined NetBSD1_0 || defined __OpenBSD__ || defined OpenBSD2_0 || defined OpenBSD2_1 || defined OpenBSD2_2 || defined OpenBSD2_3 || defined OpenBSD2_4 || defined OpenBSD2_5 || defined OpenBSD2_6 || defined OpenBSD2_7 || defined OpenBSD2_8 || defined OpenBSD2_9 || defined OpenBSD3_0 || defined OpenBSD3_1 || defined OpenBSD3_2 || defined OpenBSD3_3 || defined OpenBSD3_4 || defined OpenBSD3_5 || defined OpenBSD3_6 || defined OpenBSD3_7 || defined OpenBSD3_8 || defined OpenBSD3_9 || defined OpenBSD4_0 || defined OpenBSD4_1 || defined OpenBSD4_2 || defined OpenBSD4_3 || defined OpenBSD4_4 || defined OpenBSD4_5 || defined OpenBSD4_6 || defined OpenBSD4_7 || defined OpenBSD4_8 || defined OpenBSD4_9
# include <sys/endian.h>
#endif

/* Main */
int main(int, char*[]) /* noexcept */ {
  enum {
    byte_big_endian,
    byte_little_endian,
    mixed_endian,
    word_big_endian,
    word_little_endian
  }
  #ifdef __cpp_lib_endian
    endian = std::endian::native == std::endian::little ? byte_little_endian : byte_big_endian;
  #elif
    (defined __GLIBC__ && ((defined _BYTE_ORDER && (defined _LITTLE_ENDIAN && _BYTE_ORDER == _LITTLE_ENDIAN)) || (defined __BYTE_ORDER && (defined __LITTLE_ENDIAN && __BYTE_ORDER == __LITTLE_ENDIAN)))) ||                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \
    (defined __GNUC__ && (defined __BYTE_ORDER__ && (defined __ORDER_LITTLE_ENDIAN__ && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)))                                                                        ||                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \
    (defined __LITTLE_ENDIAN__ && false == defined __BIG_ENDIAN__) || (defined _LITTLE_ENDIAN && false == defined _BIG_ENDIAN)                                                                             ||
    defined __AARCH64EL__ || defined __ARMEL__ || defined __MIPSEL || defined __MIPSEL__ || defined __THUMBEL__ || defined _MIPSEL                                                                       ||
    defined __alpha__ || defined __amd64 || defined __amd64 || defined __amd64__ || defined __amd64__ || defined __bfin__ || defined __BFIN__ || defined __i386 || defined __i386__ || defined __i486__ || defined __i486__ || defined __i586__ || defined __i586__ || defined __i686__ || defined __I86__ || defined __ia64 || defined __ia64__ || defined __IA64__ || defined __INTEL__ || defined __itanium__ || defined __THW_INTEL__ || defined __x86_64 || defined __x86_64__ || defined _IA64 || defined _M_ALPHA || defined _M_AMD64 || defined _M_IA64 || defined _M_IX86 || defined _M_X64 || defined _X86_ || defined bfin || defined BFIN || defined i386 || ((CPP_VENDOR & CPP_MICROSOFT_WINDOWS_VENDOR) && (defined __arm64 || defined __arm__ || defined __TARGET_ARCH_ARM || defined __TARGET_ARCH_THUMB || defined __thumb__ || defined _M_ARM)) \
  )
    endian = byte_little_endian;
  #elif
    (defined __GLIBC__ && ((defined _BYTE_ORDER && (defined _BIG_ENDIAN && _BYTE_ORDER == _BIG_ENDIAN)) || (defined __BYTE_ORDER && (defined __BIG_ENDIAN && __BYTE_ORDER == __BIG_ENDIAN)))) ||
    (defined __GNUC__ && (defined __BYTE_ORDER__ && (defined __ORDER_BIG_ENDIAN__ && __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)))                                                                  ||
    (defined __BIG_ENDIAN__ && false == defined __LITTLE_ENDIAN__) || (defined _BIG_ENDIAN && false == defined _LITTLE_ENDIAN)                                                                 ||
    defined __AARCH64EB__ || defined __ARMEB__ || defined __MIPSEB || defined __MIPSEB__ || defined __THUMBEB__ || defined _MIPSEB                                                           ||                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \
    defined __370__ || defined __hppa || defined __hpux || defined __m68k__ || defined __mc68000 || defined __mc68000__ || defined __mc68010 || defined __mc68010__ || defined __mc68020 || defined __mc68020__ || defined __mc68030 || defined __mc68030__ || defined __mc68040 || defined __mc68040__ || defined __mc68060 || defined __mc68060__ || defined __powerpc__ || defined __ppc__ || defined __s390__ || defined __s390__ || defined __s390x__ || defined __sparc || defined __sparc__ || defined __sparcv8 || defined __sparcv9 || defined __SYSC_ZARCH__ || defined __THW_370__ || defined _POWER || defined M68000 || defined mc68000 || defined mc68010 || defined mc68020 || defined mc68030 || defined mc68040 || defined mc68060 \
  )
    endian = byte_big_endian;
  #elif (                                                                                                                                                                                             \
    (defined __GLIBC__ && ((defined _BYTE_ORDER && (defined _PDP_ENDIAN && _BYTE_ORDER == _PDP_ENDIAN)) || (defined __BYTE_ORDER && (defined __PDP_ENDIAN && __BYTE_ORDER == __PDP_ENDIAN)))) || \
    (defined __GNUC__ && (defined __BYTE_ORDER__ && (defined __ORDER_PDP_ENDIAN__ && __BYTE_ORDER__ == __ORDER_PDP_ENDIAN__)))                                                                     \
  )
    endian = word_little_endian;
  #else
    endian = sizeof(unsigned char) == sizeof(uintmax_t) || 1u == reinterpret_cast<unsigned char const&>(static_cast<uintmax_t const&>(1u)) ? byte_little_endian : byte_big_endian;
  #endif

  switch (endian) {
    case byte_big_endian   : std::puts("byte-big");    break;
    case byte_little_endian: std::puts("byte-little"); break;
    case mixed_endian      : std::puts("...");         break;
    case word_big_endian   : std::puts("word-big");    break;
    case word_little_endian: std::puts("word-little"); break;
  }
}
