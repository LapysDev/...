/* ... */
#pragma once

/* Import */
#include <math.h> // Mathematics
#include <stdio.h> // Standard Input-Output
#include <stdlib.h> // Standard Library

/* Namespace */
    /* ... */
    inline namespace {
        /* Function */
            // Absolute
            inline double abs(const double number) { return number < 0 ? -number : number; }
            inline float abs(const float number) { return number < 0 ? -number : number; }
            inline int abs(const int number) { return number < 0 ? -number : number; }
            inline long abs(const long number) { return number < 0 ? -number : number; }
            inline long double abs(const long double number) { return number < 0 ? -number : number; }
            inline long long abs(const long long number) { return number < 0 ? -number : number; }
            inline short abs(const short number) { return number < 0 ? -number : number; }
            inline unsigned int abs(const unsigned int number) { return number < 0 ? -number : number; }
            inline unsigned long abs(const unsigned long number) { return number < 0 ? -number : number; }
            inline unsigned long long abs(const unsigned long long number) { return number < 0 ? -number : number; }
            inline unsigned short abs(const unsigned short number) { return number < 0 ? -number : number; }

            // Align --- NOTE (Lapys) -> Aligns the number to a block size (which must be a power of 2).
            inline int align(const int number, const int blockSize) { return (number + (blockSize - 1)) & ~(blockSize - 1); } inline int align(const int number, const long blockSize) { return (number + (blockSize - 1L)) & ~(blockSize - 1L); } inline int align(const int number, const long long blockSize) { return (number + (blockSize - 1LL)) & ~(blockSize - 1LL); } inline int align(const int number, const short blockSize) { return (number + (blockSize - 1)) & ~(blockSize - 1); } inline int align(const int number, const unsigned int blockSize) { return (number + (blockSize - 1u)) & ~(blockSize - 1u); } inline int align(const int number, const unsigned long blockSize) { return (number + (blockSize - 1uL)) & ~(blockSize - 1uL); } inline int align(const int number, const unsigned long long blockSize) { return (number + (blockSize - 1uLL)) & ~(blockSize - 1uLL); } inline int align(const int number, const unsigned short blockSize) { return (number + (blockSize - 1u)) & ~(blockSize - 1u); }
            inline long align(const long number, const int blockSize) { return (number + (blockSize - 1)) & ~(blockSize - 1); } inline long align(const long number, const long blockSize) { return (number + (blockSize - 1L)) & ~(blockSize - 1L); } inline long align(const long number, const long long blockSize) { return (number + (blockSize - 1LL)) & ~(blockSize - 1LL); } inline long align(const long number, const short blockSize) { return (number + (blockSize - 1)) & ~(blockSize - 1); } inline long align(const long number, const unsigned int blockSize) { return (number + (blockSize - 1u)) & ~(blockSize - 1u); } inline long align(const long number, const unsigned long blockSize) { return (number + (blockSize - 1uL)) & ~(blockSize - 1uL); } inline long align(const long number, const unsigned long long blockSize) { return (number + (blockSize - 1uLL)) & ~(blockSize - 1uLL); } inline long align(const long number, const unsigned short blockSize) { return (number + (blockSize - 1u)) & ~(blockSize - 1u); }
            inline long long align(const long long number, const int blockSize) { return (number + (blockSize - 1)) & ~(blockSize - 1); } inline long long align(const long long number, const long blockSize) { return (number + (blockSize - 1L)) & ~(blockSize - 1L); } inline long long align(const long long number, const long long blockSize) { return (number + (blockSize - 1LL)) & ~(blockSize - 1LL); } inline long long align(const long long number, const short blockSize) { return (number + (blockSize - 1)) & ~(blockSize - 1); } inline long long align(const long long number, const unsigned int blockSize) { return (number + (blockSize - 1u)) & ~(blockSize - 1u); } inline long long align(const long long number, const unsigned long blockSize) { return (number + (blockSize - 1uL)) & ~(blockSize - 1uL); } inline long long align(const long long number, const unsigned long long blockSize) { return (number + (blockSize - 1uLL)) & ~(blockSize - 1uLL); } inline long long align(const long long number, const unsigned short blockSize) { return (number + (blockSize - 1u)) & ~(blockSize - 1u); }
            inline short align(const short number, const int blockSize) { return (number + (blockSize - 1)) & ~(blockSize - 1); } inline short align(const short number, const long blockSize) { return (number + (blockSize - 1L)) & ~(blockSize - 1L); } inline short align(const short number, const long long blockSize) { return (number + (blockSize - 1LL)) & ~(blockSize - 1LL); } inline short align(const short number, const short blockSize) { return (number + (blockSize - 1)) & ~(blockSize - 1); } inline short align(const short number, const unsigned int blockSize) { return (number + (blockSize - 1u)) & ~(blockSize - 1u); } inline short align(const short number, const unsigned long blockSize) { return (number + (blockSize - 1uL)) & ~(blockSize - 1uL); } inline short align(const short number, const unsigned long long blockSize) { return (number + (blockSize - 1uLL)) & ~(blockSize - 1uLL); } inline short align(const short number, const unsigned short blockSize) { return (number + (blockSize - 1u)) & ~(blockSize - 1u); }
            inline unsigned int align(const unsigned int number, const int blockSize) { return (number + (blockSize - 1)) & ~(blockSize - 1); } inline unsigned int align(const unsigned int number, const long blockSize) { return (number + (blockSize - 1L)) & ~(blockSize - 1L); } inline unsigned int align(const unsigned int number, const long long blockSize) { return (number + (blockSize - 1LL)) & ~(blockSize - 1LL); } inline unsigned int align(const unsigned int number, const short blockSize) { return (number + (blockSize - 1)) & ~(blockSize - 1); } inline unsigned int align(const unsigned int number, const unsigned int blockSize) { return (number + (blockSize - 1u)) & ~(blockSize - 1u); } inline unsigned int align(const unsigned int number, const unsigned long blockSize) { return (number + (blockSize - 1uL)) & ~(blockSize - 1uL); } inline unsigned int align(const unsigned int number, const unsigned long long blockSize) { return (number + (blockSize - 1uLL)) & ~(blockSize - 1uLL); } inline unsigned int align(const unsigned int number, const unsigned short blockSize) { return (number + (blockSize - 1u)) & ~(blockSize - 1u); }
            inline unsigned long align(const unsigned long number, const int blockSize) { return (number + (blockSize - 1)) & ~(blockSize - 1); } inline unsigned long align(const unsigned long number, const long blockSize) { return (number + (blockSize - 1L)) & ~(blockSize - 1L); } inline unsigned long align(const unsigned long number, const long long blockSize) { return (number + (blockSize - 1LL)) & ~(blockSize - 1LL); } inline unsigned long align(const unsigned long number, const short blockSize) { return (number + (blockSize - 1)) & ~(blockSize - 1); } inline unsigned long align(const unsigned long number, const unsigned int blockSize) { return (number + (blockSize - 1u)) & ~(blockSize - 1u); } inline unsigned long align(const unsigned long number, const unsigned long blockSize) { return (number + (blockSize - 1uL)) & ~(blockSize - 1uL); } inline unsigned long align(const unsigned long number, const unsigned long long blockSize) { return (number + (blockSize - 1uLL)) & ~(blockSize - 1uLL); } inline unsigned long align(const unsigned long number, const unsigned short blockSize) { return (number + (blockSize - 1u)) & ~(blockSize - 1u); }
            inline unsigned long long align(const unsigned long long number, const int blockSize) { return (number + (blockSize - 1)) & ~(blockSize - 1); } inline unsigned long long align(const unsigned long long number, const long blockSize) { return (number + (blockSize - 1L)) & ~(blockSize - 1L); } inline unsigned long long align(const unsigned long long number, const long long blockSize) { return (number + (blockSize - 1LL)) & ~(blockSize - 1LL); } inline unsigned long long align(const unsigned long long number, const short blockSize) { return (number + (blockSize - 1)) & ~(blockSize - 1); } inline unsigned long long align(const unsigned long long number, const unsigned int blockSize) { return (number + (blockSize - 1u)) & ~(blockSize - 1u); } inline unsigned long long align(const unsigned long long number, const unsigned long blockSize) { return (number + (blockSize - 1uL)) & ~(blockSize - 1uL); } inline unsigned long long align(const unsigned long long number, const unsigned long long blockSize) { return (number + (blockSize - 1uLL)) & ~(blockSize - 1uLL); } inline unsigned long long align(const unsigned long long number, const unsigned short blockSize) { return (number + (blockSize - 1u)) & ~(blockSize - 1u); }
            inline unsigned short align(const unsigned short number, const int blockSize) { return (number + (blockSize - 1)) & ~(blockSize - 1); } inline unsigned short align(const unsigned short number, const long blockSize) { return (number + (blockSize - 1L)) & ~(blockSize - 1L); } inline unsigned short align(const unsigned short number, const long long blockSize) { return (number + (blockSize - 1LL)) & ~(blockSize - 1LL); } inline unsigned short align(const unsigned short number, const short blockSize) { return (number + (blockSize - 1)) & ~(blockSize - 1); } inline unsigned short align(const unsigned short number, const unsigned int blockSize) { return (number + (blockSize - 1u)) & ~(blockSize - 1u); } inline unsigned short align(const unsigned short number, const unsigned long blockSize) { return (number + (blockSize - 1uL)) & ~(blockSize - 1uL); } inline unsigned short align(const unsigned short number, const unsigned long long blockSize) { return (number + (blockSize - 1uLL)) & ~(blockSize - 1uLL); } inline unsigned short align(const unsigned short number, const unsigned short blockSize) { return (number + (blockSize - 1u)) & ~(blockSize - 1u); }

            // Fit To --- NOTE (Lapys) -> Fits the number to a unit size.
            inline int fitTo(const int number, const int unitSize) { return unitSize ? (number / unitSize) + (number % unitSize ? 1 : 0) : 0; }

            // Image Size --- NOTE (Lapys) -> Calculates the image size for a given line width (in pixels) with a certain height and for a certain number of bits per pixel & alignment block size (which must be a power of 2).

            // Scan Width --- NOTE (Lapys) -> Calculates the scan width for a given line width (in pixels) for a certain number of bits per pixel & specified alignment block size (which must be a power of 2).
    }

    /* Graphics */
    namespace Graphics {}
